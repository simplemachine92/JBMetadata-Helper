/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MetaDataHelperInterface extends utils.Interface {
  functions: {
    "addToMetadata(bytes4,bytes,bytes)": FunctionFragment;
    "createMetadata(bytes4[],bytes[])": FunctionFragment;
    "getMetadata(bytes4,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "addToMetadata" | "createMetadata" | "getMetadata"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToMetadata",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createMetadata",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadata",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MetaDataHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetaDataHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToMetadata(
      _idToAdd: BytesLike,
      _dataToAdd: BytesLike,
      _originalMetadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { _newMetadata: string }>;

    createMetadata(
      _ids: BytesLike[],
      _metadatas: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string] & { _metadata: string }>;

    getMetadata(
      _id: BytesLike,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { _targetMetadata: string }>;
  };

  addToMetadata(
    _idToAdd: BytesLike,
    _dataToAdd: BytesLike,
    _originalMetadata: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  createMetadata(
    _ids: BytesLike[],
    _metadatas: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  getMetadata(
    _id: BytesLike,
    _metadata: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addToMetadata(
      _idToAdd: BytesLike,
      _dataToAdd: BytesLike,
      _originalMetadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    createMetadata(
      _ids: BytesLike[],
      _metadatas: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    getMetadata(
      _id: BytesLike,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addToMetadata(
      _idToAdd: BytesLike,
      _dataToAdd: BytesLike,
      _originalMetadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createMetadata(
      _ids: BytesLike[],
      _metadatas: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadata(
      _id: BytesLike,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToMetadata(
      _idToAdd: BytesLike,
      _dataToAdd: BytesLike,
      _originalMetadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createMetadata(
      _ids: BytesLike[],
      _metadatas: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadata(
      _id: BytesLike,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
